#!/usr/bin/execlineb -P
# -*- mode: bash -*-
# vi: set ft=bash:

# FIXME: Enable this
# FIXME: Change the value of the file from 30 to something else earlier
# source: https://github.com/nicjo814/docker-kodi/blob/8d4e7b7c2be098ff8db1026613d92a0f68ca3d33/root/etc/cont-init.d/30-dbus

# # make folders
# mkdir -p \
# 	/var/run/dbus

# # delete existing pid if found
# [[ -e /var/run/dbus/pid ]] && \
# 	rm -f /var/run/dbus/pid

# # permissions
# chown messagebus:messagebus \
# 	/var/run/dbus
# dbus-uuidgen --ensure
# sleep 1


with-contenv

# NOTE: s6-envuidgid program
# s6-envuidgid potentially sets the UID,
# GID and GIDLIST environment variables according to
# the options and arguments it is given; then it executes into another program.
# s6-envuidgid [ -u | -g | -B ] [ -n ] [ -i | -D uid:gid:gidlist ] account prog...
# NOTE: set UID and GID env vars to pi
# foreground { s6-envuidgid pi who }

# NOTE: backtick program
# backtick runs a program and stores its output in an environment variable, then executes another program.
# backtick [ -i | -I | -D default ] [ -n ] variable { prog1... } prog2...
# -n : chomp an ending newline off prog1...'s output.
# -i : backtick exits 1.
# -I : variable is removed from the environment, and execution proceeds.
# -D default : the value of variable is set to default, and execution proceeds.
# neither of those options: the value of variable is set to whatever the start of prog1...'s output is, up to the first null character, or to whatever prog1... wrote before crashing; then execution proceeds.
# ADDRESS_FILE=$(mktemp /tmp/pydbustest.XXXXXXXXX)
# PID_FILE=$(mktemp /tmp/pydbustest.XXXXXXXXX)
# foreground {
#   backtick ADDRESS_FILE { mktemp /tmp/pydbustest_address.XXXXXXXXX }
#   importas ADDRESS_FILE !

#   backtick PID_FILE { mktemp /tmp/pydbustest_pid_file.XXXXXXXXX }
#   importas PID_FILE !

#   foreground { s6-echo " [run] ADDRESS_FILE:${ADDRESS_FILE}" }
#   foreground { s6-echo " [run] PID_FILE:${PID_FILE}" }
# }

# NOTE: fdmove program
# fdmove moves or copies a given file descriptor, then executes a program.
# fdmove [ -c ] fdto fdfrom prog...
# fdmove moves the file descriptor number fdfrom, to number fdto, then execs into prog with its arguments. If fdto is open, fdmove closes it before moving fdfrom to it.
# -c : duplicate fdfrom to fdto instead of moving it; do not close fdfrom.
# fdmove -c a b prog... is roughly equivalent to sh -c 'exec prog... a>&b'
# fdmove a b prog... is roughly equivalent to sh -c 'exec prog... a>&b b<&-'

# NOTE: trap program
# -x : forward signals. If this option is given, any signal that trap receives and that is not explicitly trapped will be sent to prog. By default, trap does not forward any signals, and does not ignore them either - for instance a SIGTERM, unless caught by a SIGTERM directive, will kill the trap process (and leave prog running). With the -x option, without a SIGTERM directive, a SIGTERM will be still be caught by trap, that will send it to prog.
trap -x
{
  term
  {
    foreground
    {

      # find location of PID_FILE
      backtick -n PID_FILE { redirfd -w 2 /dev/null find /tmp -name 'pydbustest_pid_file*' -print }
      foreground { s6-echo " [sigterm-dbus-daemon] PID_FILE:${PID_FILE}" }
      importas PID_FILE PID_FILE

      backtick -n ADDRESS_FILE { redirfd -w 2 /dev/null find /tmp -name 'pydbustest_address*' -print }
      foreground { s6-echo " [sigterm-dbus-daemon] ADDRESS_FILE:${ADDRESS_FILE}" }
      importas ADDRESS_FILE ADDRESS_FILE

      # find PID number
      backtick -n PID { redirfd -w 2 /dev/null cat ${PID_FILE} }
      foreground { s6-echo " [sigterm-dbus-daemon] PID:${PID}" }
      importas PID PID

      # kill process
      foreground {
          kill -TERM ${PID}
          rm ${ADDRESS_FILE}
          rm ${PID_FILE}
      }
    }
    echo [sigterm-dbus-daemon] graceful shutdown complete
  }
}
foreground {
  backtick -n ADDRESS_FILE { redirfd -w 2 /dev/null s6-applyuidgid -u 1000 -g 1000 mktemp /tmp/pydbustest_address.XXXXXXXXX }
#   importas ADDRESS_FILE ADDRESS_FILE

  backtick -n PID_FILE { redirfd -w 2 /dev/null s6-applyuidgid -u 1000 -g 1000 mktemp /tmp/pydbustest_pid_file.XXXXXXXXX }
#   importas PID_FILE PID_FILE

  multisubstitute {
    importas ADDRESS_FILE ADDRESS_FILE
    importas PID_FILE PID_FILE
  }

  foreground { sudo chown pi:pi -R ${ADDRESS_FILE} ${PID_FILE} }
  foreground { s6-echo " [run] ADDRESS_FILE:${ADDRESS_FILE}" }
  foreground { s6-echo " [run] PID_FILE:${PID_FILE}" }
}

foreground { s6-echo " [verify] ADDRESS_FILE:${ADDRESS_FILE}" }
foreground { s6-echo " [verify] PID_FILE:${PID_FILE}" }
redirfd -w 0 $ADDRESS_FILE
redirfd -w 1 $PID_FILE
s6-applyuidgid -u 1000 -g 1000 dbus-daemon --session --print-address=0 --print-pid=1 --fork


# foreground { s6-echo " [verify] ADDRESS_FILE:${ADDRESS_FILE}" }
# foreground { s6-echo " [verify] PID_FILE:${PID_FILE}" }

# redirfd -r 0 poem.txt
# 4	pipeline { tr A-Z a-z }
# 5	redirfd -w 1 c
# 6	redirfd -w 2 d
# s6-applyuidgid -u 1000 -g 1000 /scripts/.dbus_command
# FIXME: try this https://github.com/search?q=redirfd+-w+1&type=Code&utf8=%E2%9C%93
# https://github.com/shirley-zhou/CS111/blob/052f16e0efcf5c83d042b7ef43f0b0f0f9bbb9df/lab1/exec5.sh
# redirfd -w 0 $ADDRESS_FILE
# redirfd -w 1 $PID_FILE
# s6-applyuidgid -u 1000 -g 1000 dbus-daemon --session --print-address=0 --print-pid=1 --fork


# dbus-daemon --session --print-address=0 --print-pid=1 --fork 0>"$ADDRESS_FILE" 1>"$PID_FILE"

########################################################################
# ADDRESS_FILE=$(mktemp /tmp/pydbustest.XXXXXXXXX)
# PID_FILE=$(mktemp /tmp/pydbustest.XXXXXXXXX)

# dbus-daemon --session --print-address=0 --print-pid=1 --fork 0>"$ADDRESS_FILE" 1>"$PID_FILE"

# export DBUS_SESSION_BUS_ADDRESS=$(cat "$ADDRESS_FILE")
# PID=$(cat "$PID_FILE")

# echo "export DBUS_SESSION_BUS_ADDRESS=$(cat "$ADDRESS_FILE")" > ~pi/.exports

# echo "D-Bus per-session daemon address is: $DBUS_SESSION_BUS_ADDRESS"

# trap 'kill -TERM $PID' EXIT

# rm "$ADDRESS_FILE" "$PID_FILE"

# sudo find \( -name __pycache__ -o -name '*.pyc' \) | sudo xargs rm -rf
# sudo chown pi:pi -R /home/pi/dev

# exec "$@"
########################################################################
